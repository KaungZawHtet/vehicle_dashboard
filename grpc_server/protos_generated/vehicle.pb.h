// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_2eproto;
namespace vehicle {
class BooleanDataReply;
struct BooleanDataReplyDefaultTypeInternal;
extern BooleanDataReplyDefaultTypeInternal _BooleanDataReply_default_instance_;
class DisplayDataRequest;
struct DisplayDataRequestDefaultTypeInternal;
extern DisplayDataRequestDefaultTypeInternal _DisplayDataRequest_default_instance_;
class NumberDataReply;
struct NumberDataReplyDefaultTypeInternal;
extern NumberDataReplyDefaultTypeInternal _NumberDataReply_default_instance_;
class SeatBeltUsage;
struct SeatBeltUsageDefaultTypeInternal;
extern SeatBeltUsageDefaultTypeInternal _SeatBeltUsage_default_instance_;
}  // namespace vehicle
PROTOBUF_NAMESPACE_OPEN
template<> ::vehicle::BooleanDataReply* Arena::CreateMaybeMessage<::vehicle::BooleanDataReply>(Arena*);
template<> ::vehicle::DisplayDataRequest* Arena::CreateMaybeMessage<::vehicle::DisplayDataRequest>(Arena*);
template<> ::vehicle::NumberDataReply* Arena::CreateMaybeMessage<::vehicle::NumberDataReply>(Arena*);
template<> ::vehicle::SeatBeltUsage* Arena::CreateMaybeMessage<::vehicle::SeatBeltUsage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vehicle {

// ===================================================================

class DisplayDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vehicle.DisplayDataRequest) */ {
 public:
  inline DisplayDataRequest() : DisplayDataRequest(nullptr) {}
  ~DisplayDataRequest() override;
  explicit PROTOBUF_CONSTEXPR DisplayDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisplayDataRequest(const DisplayDataRequest& from);
  DisplayDataRequest(DisplayDataRequest&& from) noexcept
    : DisplayDataRequest() {
    *this = ::std::move(from);
  }

  inline DisplayDataRequest& operator=(const DisplayDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayDataRequest& operator=(DisplayDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisplayDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisplayDataRequest* internal_default_instance() {
    return reinterpret_cast<const DisplayDataRequest*>(
               &_DisplayDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DisplayDataRequest& a, DisplayDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisplayDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisplayDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisplayDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisplayDataRequest& from) {
    DisplayDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vehicle.DisplayDataRequest";
  }
  protected:
  explicit DisplayDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // bool request = 1;
  void clear_request();
  bool request() const;
  void set_request(bool value);
  private:
  bool _internal_request() const;
  void _internal_set_request(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vehicle.DisplayDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class NumberDataReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vehicle.NumberDataReply) */ {
 public:
  inline NumberDataReply() : NumberDataReply(nullptr) {}
  ~NumberDataReply() override;
  explicit PROTOBUF_CONSTEXPR NumberDataReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberDataReply(const NumberDataReply& from);
  NumberDataReply(NumberDataReply&& from) noexcept
    : NumberDataReply() {
    *this = ::std::move(from);
  }

  inline NumberDataReply& operator=(const NumberDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberDataReply& operator=(NumberDataReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberDataReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberDataReply* internal_default_instance() {
    return reinterpret_cast<const NumberDataReply*>(
               &_NumberDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NumberDataReply& a, NumberDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberDataReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberDataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumberDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumberDataReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumberDataReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumberDataReply& from) {
    NumberDataReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberDataReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vehicle.NumberDataReply";
  }
  protected:
  explicit NumberDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpmFieldNumber = 1,
    kSpeedFieldNumber = 2,
    kFuelFieldNumber = 3,
    kTemperatureFieldNumber = 4,
  };
  // int32 rpm = 1;
  void clear_rpm();
  int32_t rpm() const;
  void set_rpm(int32_t value);
  private:
  int32_t _internal_rpm() const;
  void _internal_set_rpm(int32_t value);
  public:

  // int32 speed = 2;
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // int32 fuel = 3;
  void clear_fuel();
  int32_t fuel() const;
  void set_fuel(int32_t value);
  private:
  int32_t _internal_fuel() const;
  void _internal_set_fuel(int32_t value);
  public:

  // int32 temperature = 4;
  void clear_temperature();
  int32_t temperature() const;
  void set_temperature(int32_t value);
  private:
  int32_t _internal_temperature() const;
  void _internal_set_temperature(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vehicle.NumberDataReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t rpm_;
    int32_t speed_;
    int32_t fuel_;
    int32_t temperature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class BooleanDataReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vehicle.BooleanDataReply) */ {
 public:
  inline BooleanDataReply() : BooleanDataReply(nullptr) {}
  ~BooleanDataReply() override;
  explicit PROTOBUF_CONSTEXPR BooleanDataReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanDataReply(const BooleanDataReply& from);
  BooleanDataReply(BooleanDataReply&& from) noexcept
    : BooleanDataReply() {
    *this = ::std::move(from);
  }

  inline BooleanDataReply& operator=(const BooleanDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanDataReply& operator=(BooleanDataReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanDataReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanDataReply* internal_default_instance() {
    return reinterpret_cast<const BooleanDataReply*>(
               &_BooleanDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BooleanDataReply& a, BooleanDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanDataReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanDataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanDataReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanDataReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanDataReply& from) {
    BooleanDataReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanDataReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vehicle.BooleanDataReply";
  }
  protected:
  explicit BooleanDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEngineGoodFieldNumber = 1,
    kIsBreakGoodFieldNumber = 2,
    kIsSeatBeltUsedFieldNumber = 3,
  };
  // bool isEngineGood = 1;
  void clear_isenginegood();
  bool isenginegood() const;
  void set_isenginegood(bool value);
  private:
  bool _internal_isenginegood() const;
  void _internal_set_isenginegood(bool value);
  public:

  // bool isBreakGood = 2;
  void clear_isbreakgood();
  bool isbreakgood() const;
  void set_isbreakgood(bool value);
  private:
  bool _internal_isbreakgood() const;
  void _internal_set_isbreakgood(bool value);
  public:

  // bool isSeatBeltUsed = 3;
  void clear_isseatbeltused();
  bool isseatbeltused() const;
  void set_isseatbeltused(bool value);
  private:
  bool _internal_isseatbeltused() const;
  void _internal_set_isseatbeltused(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vehicle.BooleanDataReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool isenginegood_;
    bool isbreakgood_;
    bool isseatbeltused_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class SeatBeltUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vehicle.SeatBeltUsage) */ {
 public:
  inline SeatBeltUsage() : SeatBeltUsage(nullptr) {}
  ~SeatBeltUsage() override;
  explicit PROTOBUF_CONSTEXPR SeatBeltUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeatBeltUsage(const SeatBeltUsage& from);
  SeatBeltUsage(SeatBeltUsage&& from) noexcept
    : SeatBeltUsage() {
    *this = ::std::move(from);
  }

  inline SeatBeltUsage& operator=(const SeatBeltUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeatBeltUsage& operator=(SeatBeltUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeatBeltUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeatBeltUsage* internal_default_instance() {
    return reinterpret_cast<const SeatBeltUsage*>(
               &_SeatBeltUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SeatBeltUsage& a, SeatBeltUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(SeatBeltUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeatBeltUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeatBeltUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeatBeltUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeatBeltUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeatBeltUsage& from) {
    SeatBeltUsage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeatBeltUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vehicle.SeatBeltUsage";
  }
  protected:
  explicit SeatBeltUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSeatBeltUsedFieldNumber = 1,
  };
  // bool IsSeatBeltUsed = 1;
  void clear_isseatbeltused();
  bool isseatbeltused() const;
  void set_isseatbeltused(bool value);
  private:
  bool _internal_isseatbeltused() const;
  void _internal_set_isseatbeltused(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vehicle.SeatBeltUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool isseatbeltused_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DisplayDataRequest

// bool request = 1;
inline void DisplayDataRequest::clear_request() {
  _impl_.request_ = false;
}
inline bool DisplayDataRequest::_internal_request() const {
  return _impl_.request_;
}
inline bool DisplayDataRequest::request() const {
  // @@protoc_insertion_point(field_get:vehicle.DisplayDataRequest.request)
  return _internal_request();
}
inline void DisplayDataRequest::_internal_set_request(bool value) {
  
  _impl_.request_ = value;
}
inline void DisplayDataRequest::set_request(bool value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:vehicle.DisplayDataRequest.request)
}

// -------------------------------------------------------------------

// NumberDataReply

// int32 rpm = 1;
inline void NumberDataReply::clear_rpm() {
  _impl_.rpm_ = 0;
}
inline int32_t NumberDataReply::_internal_rpm() const {
  return _impl_.rpm_;
}
inline int32_t NumberDataReply::rpm() const {
  // @@protoc_insertion_point(field_get:vehicle.NumberDataReply.rpm)
  return _internal_rpm();
}
inline void NumberDataReply::_internal_set_rpm(int32_t value) {
  
  _impl_.rpm_ = value;
}
inline void NumberDataReply::set_rpm(int32_t value) {
  _internal_set_rpm(value);
  // @@protoc_insertion_point(field_set:vehicle.NumberDataReply.rpm)
}

// int32 speed = 2;
inline void NumberDataReply::clear_speed() {
  _impl_.speed_ = 0;
}
inline int32_t NumberDataReply::_internal_speed() const {
  return _impl_.speed_;
}
inline int32_t NumberDataReply::speed() const {
  // @@protoc_insertion_point(field_get:vehicle.NumberDataReply.speed)
  return _internal_speed();
}
inline void NumberDataReply::_internal_set_speed(int32_t value) {
  
  _impl_.speed_ = value;
}
inline void NumberDataReply::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:vehicle.NumberDataReply.speed)
}

// int32 fuel = 3;
inline void NumberDataReply::clear_fuel() {
  _impl_.fuel_ = 0;
}
inline int32_t NumberDataReply::_internal_fuel() const {
  return _impl_.fuel_;
}
inline int32_t NumberDataReply::fuel() const {
  // @@protoc_insertion_point(field_get:vehicle.NumberDataReply.fuel)
  return _internal_fuel();
}
inline void NumberDataReply::_internal_set_fuel(int32_t value) {
  
  _impl_.fuel_ = value;
}
inline void NumberDataReply::set_fuel(int32_t value) {
  _internal_set_fuel(value);
  // @@protoc_insertion_point(field_set:vehicle.NumberDataReply.fuel)
}

// int32 temperature = 4;
inline void NumberDataReply::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline int32_t NumberDataReply::_internal_temperature() const {
  return _impl_.temperature_;
}
inline int32_t NumberDataReply::temperature() const {
  // @@protoc_insertion_point(field_get:vehicle.NumberDataReply.temperature)
  return _internal_temperature();
}
inline void NumberDataReply::_internal_set_temperature(int32_t value) {
  
  _impl_.temperature_ = value;
}
inline void NumberDataReply::set_temperature(int32_t value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:vehicle.NumberDataReply.temperature)
}

// -------------------------------------------------------------------

// BooleanDataReply

// bool isEngineGood = 1;
inline void BooleanDataReply::clear_isenginegood() {
  _impl_.isenginegood_ = false;
}
inline bool BooleanDataReply::_internal_isenginegood() const {
  return _impl_.isenginegood_;
}
inline bool BooleanDataReply::isenginegood() const {
  // @@protoc_insertion_point(field_get:vehicle.BooleanDataReply.isEngineGood)
  return _internal_isenginegood();
}
inline void BooleanDataReply::_internal_set_isenginegood(bool value) {
  
  _impl_.isenginegood_ = value;
}
inline void BooleanDataReply::set_isenginegood(bool value) {
  _internal_set_isenginegood(value);
  // @@protoc_insertion_point(field_set:vehicle.BooleanDataReply.isEngineGood)
}

// bool isBreakGood = 2;
inline void BooleanDataReply::clear_isbreakgood() {
  _impl_.isbreakgood_ = false;
}
inline bool BooleanDataReply::_internal_isbreakgood() const {
  return _impl_.isbreakgood_;
}
inline bool BooleanDataReply::isbreakgood() const {
  // @@protoc_insertion_point(field_get:vehicle.BooleanDataReply.isBreakGood)
  return _internal_isbreakgood();
}
inline void BooleanDataReply::_internal_set_isbreakgood(bool value) {
  
  _impl_.isbreakgood_ = value;
}
inline void BooleanDataReply::set_isbreakgood(bool value) {
  _internal_set_isbreakgood(value);
  // @@protoc_insertion_point(field_set:vehicle.BooleanDataReply.isBreakGood)
}

// bool isSeatBeltUsed = 3;
inline void BooleanDataReply::clear_isseatbeltused() {
  _impl_.isseatbeltused_ = false;
}
inline bool BooleanDataReply::_internal_isseatbeltused() const {
  return _impl_.isseatbeltused_;
}
inline bool BooleanDataReply::isseatbeltused() const {
  // @@protoc_insertion_point(field_get:vehicle.BooleanDataReply.isSeatBeltUsed)
  return _internal_isseatbeltused();
}
inline void BooleanDataReply::_internal_set_isseatbeltused(bool value) {
  
  _impl_.isseatbeltused_ = value;
}
inline void BooleanDataReply::set_isseatbeltused(bool value) {
  _internal_set_isseatbeltused(value);
  // @@protoc_insertion_point(field_set:vehicle.BooleanDataReply.isSeatBeltUsed)
}

// -------------------------------------------------------------------

// SeatBeltUsage

// bool IsSeatBeltUsed = 1;
inline void SeatBeltUsage::clear_isseatbeltused() {
  _impl_.isseatbeltused_ = false;
}
inline bool SeatBeltUsage::_internal_isseatbeltused() const {
  return _impl_.isseatbeltused_;
}
inline bool SeatBeltUsage::isseatbeltused() const {
  // @@protoc_insertion_point(field_get:vehicle.SeatBeltUsage.IsSeatBeltUsed)
  return _internal_isseatbeltused();
}
inline void SeatBeltUsage::_internal_set_isseatbeltused(bool value) {
  
  _impl_.isseatbeltused_ = value;
}
inline void SeatBeltUsage::set_isseatbeltused(bool value) {
  _internal_set_isseatbeltused(value);
  // @@protoc_insertion_point(field_set:vehicle.SeatBeltUsage.IsSeatBeltUsed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vehicle

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
