// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_2eproto;
namespace vehicle {
class FuelAmount;
struct FuelAmountDefaultTypeInternal;
extern FuelAmountDefaultTypeInternal _FuelAmount_default_instance_;
class NumberDataReply;
struct NumberDataReplyDefaultTypeInternal;
extern NumberDataReplyDefaultTypeInternal _NumberDataReply_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class SpeedAction;
struct SpeedActionDefaultTypeInternal;
extern SpeedActionDefaultTypeInternal _SpeedAction_default_instance_;
}  // namespace vehicle
PROTOBUF_NAMESPACE_OPEN
template<> ::vehicle::FuelAmount* Arena::CreateMaybeMessage<::vehicle::FuelAmount>(Arena*);
template<> ::vehicle::NumberDataReply* Arena::CreateMaybeMessage<::vehicle::NumberDataReply>(Arena*);
template<> ::vehicle::Ping* Arena::CreateMaybeMessage<::vehicle::Ping>(Arena*);
template<> ::vehicle::SpeedAction* Arena::CreateMaybeMessage<::vehicle::SpeedAction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vehicle {

enum SpeedType : int {
  LEVER_UP = 0,
  PRESERVE = 1,
  SLOW = 2,
  STOP = 3,
  SpeedType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SpeedType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SpeedType_IsValid(int value);
constexpr SpeedType SpeedType_MIN = LEVER_UP;
constexpr SpeedType SpeedType_MAX = STOP;
constexpr int SpeedType_ARRAYSIZE = SpeedType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpeedType_descriptor();
template<typename T>
inline const std::string& SpeedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpeedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpeedType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpeedType_descriptor(), enum_t_value);
}
inline bool SpeedType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpeedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpeedType>(
    SpeedType_descriptor(), name, value);
}
// ===================================================================

class Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vehicle.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  ~Ping() override;
  explicit PROTOBUF_CONSTEXPR Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ping& from) {
    Ping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vehicle.Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinaryFieldNumber = 1,
  };
  // bool binary = 1;
  void clear_binary();
  bool binary() const;
  void set_binary(bool value);
  private:
  bool _internal_binary() const;
  void _internal_set_binary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vehicle.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool binary_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class FuelAmount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vehicle.FuelAmount) */ {
 public:
  inline FuelAmount() : FuelAmount(nullptr) {}
  ~FuelAmount() override;
  explicit PROTOBUF_CONSTEXPR FuelAmount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuelAmount(const FuelAmount& from);
  FuelAmount(FuelAmount&& from) noexcept
    : FuelAmount() {
    *this = ::std::move(from);
  }

  inline FuelAmount& operator=(const FuelAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuelAmount& operator=(FuelAmount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FuelAmount& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuelAmount* internal_default_instance() {
    return reinterpret_cast<const FuelAmount*>(
               &_FuelAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FuelAmount& a, FuelAmount& b) {
    a.Swap(&b);
  }
  inline void Swap(FuelAmount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuelAmount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FuelAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FuelAmount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FuelAmount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FuelAmount& from) {
    FuelAmount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelAmount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vehicle.FuelAmount";
  }
  protected:
  explicit FuelAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuelFieldNumber = 1,
  };
  // double fuel = 1;
  void clear_fuel();
  double fuel() const;
  void set_fuel(double value);
  private:
  double _internal_fuel() const;
  void _internal_set_fuel(double value);
  public:

  // @@protoc_insertion_point(class_scope:vehicle.FuelAmount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double fuel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class SpeedAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vehicle.SpeedAction) */ {
 public:
  inline SpeedAction() : SpeedAction(nullptr) {}
  ~SpeedAction() override;
  explicit PROTOBUF_CONSTEXPR SpeedAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeedAction(const SpeedAction& from);
  SpeedAction(SpeedAction&& from) noexcept
    : SpeedAction() {
    *this = ::std::move(from);
  }

  inline SpeedAction& operator=(const SpeedAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedAction& operator=(SpeedAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeedAction* internal_default_instance() {
    return reinterpret_cast<const SpeedAction*>(
               &_SpeedAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpeedAction& a, SpeedAction& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeedAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeedAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpeedAction& from) {
    SpeedAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vehicle.SpeedAction";
  }
  protected:
  explicit SpeedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedTypeFieldNumber = 1,
  };
  // .vehicle.SpeedType speedType = 1;
  void clear_speedtype();
  ::vehicle::SpeedType speedtype() const;
  void set_speedtype(::vehicle::SpeedType value);
  private:
  ::vehicle::SpeedType _internal_speedtype() const;
  void _internal_set_speedtype(::vehicle::SpeedType value);
  public:

  // @@protoc_insertion_point(class_scope:vehicle.SpeedAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int speedtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class NumberDataReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vehicle.NumberDataReply) */ {
 public:
  inline NumberDataReply() : NumberDataReply(nullptr) {}
  ~NumberDataReply() override;
  explicit PROTOBUF_CONSTEXPR NumberDataReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberDataReply(const NumberDataReply& from);
  NumberDataReply(NumberDataReply&& from) noexcept
    : NumberDataReply() {
    *this = ::std::move(from);
  }

  inline NumberDataReply& operator=(const NumberDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberDataReply& operator=(NumberDataReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberDataReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberDataReply* internal_default_instance() {
    return reinterpret_cast<const NumberDataReply*>(
               &_NumberDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NumberDataReply& a, NumberDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberDataReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberDataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumberDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumberDataReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumberDataReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumberDataReply& from) {
    NumberDataReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberDataReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vehicle.NumberDataReply";
  }
  protected:
  explicit NumberDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpmFieldNumber = 1,
    kSpeedFieldNumber = 2,
    kFuelFieldNumber = 3,
    kTemperatureFieldNumber = 4,
    kDistanceFieldNumber = 5,
  };
  // double rpm = 1;
  void clear_rpm();
  double rpm() const;
  void set_rpm(double value);
  private:
  double _internal_rpm() const;
  void _internal_set_rpm(double value);
  public:

  // double speed = 2;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // double fuel = 3;
  void clear_fuel();
  double fuel() const;
  void set_fuel(double value);
  private:
  double _internal_fuel() const;
  void _internal_set_fuel(double value);
  public:

  // double temperature = 4;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // double distance = 5;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:vehicle.NumberDataReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double rpm_;
    double speed_;
    double fuel_;
    double temperature_;
    double distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ping

// bool binary = 1;
inline void Ping::clear_binary() {
  _impl_.binary_ = false;
}
inline bool Ping::_internal_binary() const {
  return _impl_.binary_;
}
inline bool Ping::binary() const {
  // @@protoc_insertion_point(field_get:vehicle.Ping.binary)
  return _internal_binary();
}
inline void Ping::_internal_set_binary(bool value) {
  
  _impl_.binary_ = value;
}
inline void Ping::set_binary(bool value) {
  _internal_set_binary(value);
  // @@protoc_insertion_point(field_set:vehicle.Ping.binary)
}

// -------------------------------------------------------------------

// FuelAmount

// double fuel = 1;
inline void FuelAmount::clear_fuel() {
  _impl_.fuel_ = 0;
}
inline double FuelAmount::_internal_fuel() const {
  return _impl_.fuel_;
}
inline double FuelAmount::fuel() const {
  // @@protoc_insertion_point(field_get:vehicle.FuelAmount.fuel)
  return _internal_fuel();
}
inline void FuelAmount::_internal_set_fuel(double value) {
  
  _impl_.fuel_ = value;
}
inline void FuelAmount::set_fuel(double value) {
  _internal_set_fuel(value);
  // @@protoc_insertion_point(field_set:vehicle.FuelAmount.fuel)
}

// -------------------------------------------------------------------

// SpeedAction

// .vehicle.SpeedType speedType = 1;
inline void SpeedAction::clear_speedtype() {
  _impl_.speedtype_ = 0;
}
inline ::vehicle::SpeedType SpeedAction::_internal_speedtype() const {
  return static_cast< ::vehicle::SpeedType >(_impl_.speedtype_);
}
inline ::vehicle::SpeedType SpeedAction::speedtype() const {
  // @@protoc_insertion_point(field_get:vehicle.SpeedAction.speedType)
  return _internal_speedtype();
}
inline void SpeedAction::_internal_set_speedtype(::vehicle::SpeedType value) {
  
  _impl_.speedtype_ = value;
}
inline void SpeedAction::set_speedtype(::vehicle::SpeedType value) {
  _internal_set_speedtype(value);
  // @@protoc_insertion_point(field_set:vehicle.SpeedAction.speedType)
}

// -------------------------------------------------------------------

// NumberDataReply

// double rpm = 1;
inline void NumberDataReply::clear_rpm() {
  _impl_.rpm_ = 0;
}
inline double NumberDataReply::_internal_rpm() const {
  return _impl_.rpm_;
}
inline double NumberDataReply::rpm() const {
  // @@protoc_insertion_point(field_get:vehicle.NumberDataReply.rpm)
  return _internal_rpm();
}
inline void NumberDataReply::_internal_set_rpm(double value) {
  
  _impl_.rpm_ = value;
}
inline void NumberDataReply::set_rpm(double value) {
  _internal_set_rpm(value);
  // @@protoc_insertion_point(field_set:vehicle.NumberDataReply.rpm)
}

// double speed = 2;
inline void NumberDataReply::clear_speed() {
  _impl_.speed_ = 0;
}
inline double NumberDataReply::_internal_speed() const {
  return _impl_.speed_;
}
inline double NumberDataReply::speed() const {
  // @@protoc_insertion_point(field_get:vehicle.NumberDataReply.speed)
  return _internal_speed();
}
inline void NumberDataReply::_internal_set_speed(double value) {
  
  _impl_.speed_ = value;
}
inline void NumberDataReply::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:vehicle.NumberDataReply.speed)
}

// double fuel = 3;
inline void NumberDataReply::clear_fuel() {
  _impl_.fuel_ = 0;
}
inline double NumberDataReply::_internal_fuel() const {
  return _impl_.fuel_;
}
inline double NumberDataReply::fuel() const {
  // @@protoc_insertion_point(field_get:vehicle.NumberDataReply.fuel)
  return _internal_fuel();
}
inline void NumberDataReply::_internal_set_fuel(double value) {
  
  _impl_.fuel_ = value;
}
inline void NumberDataReply::set_fuel(double value) {
  _internal_set_fuel(value);
  // @@protoc_insertion_point(field_set:vehicle.NumberDataReply.fuel)
}

// double temperature = 4;
inline void NumberDataReply::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline double NumberDataReply::_internal_temperature() const {
  return _impl_.temperature_;
}
inline double NumberDataReply::temperature() const {
  // @@protoc_insertion_point(field_get:vehicle.NumberDataReply.temperature)
  return _internal_temperature();
}
inline void NumberDataReply::_internal_set_temperature(double value) {
  
  _impl_.temperature_ = value;
}
inline void NumberDataReply::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:vehicle.NumberDataReply.temperature)
}

// double distance = 5;
inline void NumberDataReply::clear_distance() {
  _impl_.distance_ = 0;
}
inline double NumberDataReply::_internal_distance() const {
  return _impl_.distance_;
}
inline double NumberDataReply::distance() const {
  // @@protoc_insertion_point(field_get:vehicle.NumberDataReply.distance)
  return _internal_distance();
}
inline void NumberDataReply::_internal_set_distance(double value) {
  
  _impl_.distance_ = value;
}
inline void NumberDataReply::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:vehicle.NumberDataReply.distance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vehicle

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vehicle::SpeedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vehicle::SpeedType>() {
  return ::vehicle::SpeedType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
