// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#include "vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vehicle {
PROTOBUF_CONSTEXPR Ping::Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.binary_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
PROTOBUF_CONSTEXPR FuelAmount::FuelAmount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fuel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FuelAmountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuelAmountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuelAmountDefaultTypeInternal() {}
  union {
    FuelAmount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuelAmountDefaultTypeInternal _FuelAmount_default_instance_;
PROTOBUF_CONSTEXPR SpeedAction::SpeedAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speedtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpeedActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedActionDefaultTypeInternal() {}
  union {
    SpeedAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedActionDefaultTypeInternal _SpeedAction_default_instance_;
PROTOBUF_CONSTEXPR NumberDataReply::NumberDataReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rpm_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.fuel_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NumberDataReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberDataReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberDataReplyDefaultTypeInternal() {}
  union {
    NumberDataReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberDataReplyDefaultTypeInternal _NumberDataReply_default_instance_;
}  // namespace vehicle
static ::_pb::Metadata file_level_metadata_vehicle_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_vehicle_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_vehicle_2eproto = nullptr;

const uint32_t TableStruct_vehicle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vehicle::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vehicle::Ping, _impl_.binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vehicle::FuelAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vehicle::FuelAmount, _impl_.fuel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vehicle::SpeedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vehicle::SpeedAction, _impl_.speedtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vehicle::NumberDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vehicle::NumberDataReply, _impl_.rpm_),
  PROTOBUF_FIELD_OFFSET(::vehicle::NumberDataReply, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::vehicle::NumberDataReply, _impl_.fuel_),
  PROTOBUF_FIELD_OFFSET(::vehicle::NumberDataReply, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::vehicle::NumberDataReply, _impl_.distance_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vehicle::Ping)},
  { 7, -1, -1, sizeof(::vehicle::FuelAmount)},
  { 14, -1, -1, sizeof(::vehicle::SpeedAction)},
  { 21, -1, -1, sizeof(::vehicle::NumberDataReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vehicle::_Ping_default_instance_._instance,
  &::vehicle::_FuelAmount_default_instance_._instance,
  &::vehicle::_SpeedAction_default_instance_._instance,
  &::vehicle::_NumberDataReply_default_instance_._instance,
};

const char descriptor_table_protodef_vehicle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rvehicle.proto\022\007vehicle\"\026\n\004Ping\022\016\n\006bina"
  "ry\030\001 \001(\010\"\032\n\nFuelAmount\022\014\n\004fuel\030\001 \001(\001\"4\n\013"
  "SpeedAction\022%\n\tspeedType\030\001 \001(\0162\022.vehicle"
  ".SpeedType\"b\n\017NumberDataReply\022\013\n\003rpm\030\001 \001"
  "(\001\022\r\n\005speed\030\002 \001(\001\022\014\n\004fuel\030\003 \001(\001\022\023\n\013tempe"
  "rature\030\004 \001(\001\022\020\n\010distance\030\005 \001(\001*;\n\tSpeedT"
  "ype\022\014\n\010LEVER_UP\020\000\022\014\n\010PRESERVE\020\001\022\010\n\004SLOW\020"
  "\002\022\010\n\004STOP\020\0032\211\002\n\rDataExchanger\022G\n\021GetNumb"
  "erDataFlow\022\024.vehicle.SpeedAction\032\030.vehic"
  "le.NumberDataReply\"\0000\001\022A\n\rGetNumberData\022"
  "\024.vehicle.SpeedAction\032\030.vehicle.NumberDa"
  "taReply\"\000\0226\n\010FillFuel\022\023.vehicle.FuelAmou"
  "nt\032\023.vehicle.FuelAmount\"\000\0224\n\014GetTotalFue"
  "l\022\r.vehicle.Ping\032\023.vehicle.FuelAmount\"\000B"
  "\006\242\002\003HLWb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_vehicle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vehicle_2eproto = {
    false, false, 575, descriptor_table_protodef_vehicle_2eproto,
    "vehicle.proto",
    &descriptor_table_vehicle_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_vehicle_2eproto::offsets,
    file_level_metadata_vehicle_2eproto, file_level_enum_descriptors_vehicle_2eproto,
    file_level_service_descriptors_vehicle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vehicle_2eproto_getter() {
  return &descriptor_table_vehicle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vehicle_2eproto(&descriptor_table_vehicle_2eproto);
namespace vehicle {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpeedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_2eproto);
  return file_level_enum_descriptors_vehicle_2eproto[0];
}
bool SpeedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vehicle.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.binary_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.binary_ = from._impl_.binary_;
  // @@protoc_insertion_point(copy_constructor:vehicle.Ping)
}

inline void Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.binary_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:vehicle.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.binary_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool binary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool binary = 1;
  if (this->_internal_binary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool binary = 1;
  if (this->_internal_binary() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }


void Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping*>(&to_msg);
  auto& from = static_cast<const Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vehicle.Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_binary() != 0) {
    _this->_internal_set_binary(from._internal_binary());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.binary_, other->_impl_.binary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_2eproto_getter, &descriptor_table_vehicle_2eproto_once,
      file_level_metadata_vehicle_2eproto[0]);
}

// ===================================================================

class FuelAmount::_Internal {
 public:
};

FuelAmount::FuelAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vehicle.FuelAmount)
}
FuelAmount::FuelAmount(const FuelAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FuelAmount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fuel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fuel_ = from._impl_.fuel_;
  // @@protoc_insertion_point(copy_constructor:vehicle.FuelAmount)
}

inline void FuelAmount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fuel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FuelAmount::~FuelAmount() {
  // @@protoc_insertion_point(destructor:vehicle.FuelAmount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FuelAmount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FuelAmount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FuelAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.FuelAmount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fuel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuelAmount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double fuel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.fuel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FuelAmount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.FuelAmount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double fuel = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fuel = this->_internal_fuel();
  uint64_t raw_fuel;
  memcpy(&raw_fuel, &tmp_fuel, sizeof(tmp_fuel));
  if (raw_fuel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_fuel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.FuelAmount)
  return target;
}

size_t FuelAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.FuelAmount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double fuel = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fuel = this->_internal_fuel();
  uint64_t raw_fuel;
  memcpy(&raw_fuel, &tmp_fuel, sizeof(tmp_fuel));
  if (raw_fuel != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FuelAmount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FuelAmount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FuelAmount::GetClassData() const { return &_class_data_; }


void FuelAmount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FuelAmount*>(&to_msg);
  auto& from = static_cast<const FuelAmount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vehicle.FuelAmount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fuel = from._internal_fuel();
  uint64_t raw_fuel;
  memcpy(&raw_fuel, &tmp_fuel, sizeof(tmp_fuel));
  if (raw_fuel != 0) {
    _this->_internal_set_fuel(from._internal_fuel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FuelAmount::CopyFrom(const FuelAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.FuelAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelAmount::IsInitialized() const {
  return true;
}

void FuelAmount::InternalSwap(FuelAmount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fuel_, other->_impl_.fuel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FuelAmount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_2eproto_getter, &descriptor_table_vehicle_2eproto_once,
      file_level_metadata_vehicle_2eproto[1]);
}

// ===================================================================

class SpeedAction::_Internal {
 public:
};

SpeedAction::SpeedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vehicle.SpeedAction)
}
SpeedAction::SpeedAction(const SpeedAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpeedAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speedtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.speedtype_ = from._impl_.speedtype_;
  // @@protoc_insertion_point(copy_constructor:vehicle.SpeedAction)
}

inline void SpeedAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speedtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpeedAction::~SpeedAction() {
  // @@protoc_insertion_point(destructor:vehicle.SpeedAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.SpeedAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speedtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vehicle.SpeedType speedType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_speedtype(static_cast<::vehicle::SpeedType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.SpeedAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vehicle.SpeedType speedType = 1;
  if (this->_internal_speedtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_speedtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.SpeedAction)
  return target;
}

size_t SpeedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.SpeedAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vehicle.SpeedType speedType = 1;
  if (this->_internal_speedtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_speedtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpeedAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedAction::GetClassData() const { return &_class_data_; }


void SpeedAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpeedAction*>(&to_msg);
  auto& from = static_cast<const SpeedAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vehicle.SpeedAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_speedtype() != 0) {
    _this->_internal_set_speedtype(from._internal_speedtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedAction::CopyFrom(const SpeedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.SpeedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedAction::IsInitialized() const {
  return true;
}

void SpeedAction::InternalSwap(SpeedAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.speedtype_, other->_impl_.speedtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_2eproto_getter, &descriptor_table_vehicle_2eproto_once,
      file_level_metadata_vehicle_2eproto[2]);
}

// ===================================================================

class NumberDataReply::_Internal {
 public:
};

NumberDataReply::NumberDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vehicle.NumberDataReply)
}
NumberDataReply::NumberDataReply(const NumberDataReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumberDataReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rpm_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.fuel_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rpm_, &from._impl_.rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.rpm_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:vehicle.NumberDataReply)
}

inline void NumberDataReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rpm_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.fuel_){0}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NumberDataReply::~NumberDataReply() {
  // @@protoc_insertion_point(destructor:vehicle.NumberDataReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumberDataReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NumberDataReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumberDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.NumberDataReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distance_) -
      reinterpret_cast<char*>(&_impl_.rpm_)) + sizeof(_impl_.distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberDataReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double rpm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fuel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.fuel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumberDataReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.NumberDataReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double rpm = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rpm = this->_internal_rpm();
  uint64_t raw_rpm;
  memcpy(&raw_rpm, &tmp_rpm, sizeof(tmp_rpm));
  if (raw_rpm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_rpm(), target);
  }

  // double speed = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  // double fuel = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fuel = this->_internal_fuel();
  uint64_t raw_fuel;
  memcpy(&raw_fuel, &tmp_fuel, sizeof(tmp_fuel));
  if (raw_fuel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_fuel(), target);
  }

  // double temperature = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_temperature = this->_internal_temperature();
  uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_temperature(), target);
  }

  // double distance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.NumberDataReply)
  return target;
}

size_t NumberDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.NumberDataReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rpm = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rpm = this->_internal_rpm();
  uint64_t raw_rpm;
  memcpy(&raw_rpm, &tmp_rpm, sizeof(tmp_rpm));
  if (raw_rpm != 0) {
    total_size += 1 + 8;
  }

  // double speed = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  // double fuel = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fuel = this->_internal_fuel();
  uint64_t raw_fuel;
  memcpy(&raw_fuel, &tmp_fuel, sizeof(tmp_fuel));
  if (raw_fuel != 0) {
    total_size += 1 + 8;
  }

  // double temperature = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_temperature = this->_internal_temperature();
  uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 1 + 8;
  }

  // double distance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberDataReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumberDataReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberDataReply::GetClassData() const { return &_class_data_; }


void NumberDataReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumberDataReply*>(&to_msg);
  auto& from = static_cast<const NumberDataReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vehicle.NumberDataReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rpm = from._internal_rpm();
  uint64_t raw_rpm;
  memcpy(&raw_rpm, &tmp_rpm, sizeof(tmp_rpm));
  if (raw_rpm != 0) {
    _this->_internal_set_rpm(from._internal_rpm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fuel = from._internal_fuel();
  uint64_t raw_fuel;
  memcpy(&raw_fuel, &tmp_fuel, sizeof(tmp_fuel));
  if (raw_fuel != 0) {
    _this->_internal_set_fuel(from._internal_fuel());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_temperature = from._internal_temperature();
  uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberDataReply::CopyFrom(const NumberDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.NumberDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberDataReply::IsInitialized() const {
  return true;
}

void NumberDataReply::InternalSwap(NumberDataReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberDataReply, _impl_.distance_)
      + sizeof(NumberDataReply::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(NumberDataReply, _impl_.rpm_)>(
          reinterpret_cast<char*>(&_impl_.rpm_),
          reinterpret_cast<char*>(&other->_impl_.rpm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberDataReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_2eproto_getter, &descriptor_table_vehicle_2eproto_once,
      file_level_metadata_vehicle_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vehicle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vehicle::Ping*
Arena::CreateMaybeMessage< ::vehicle::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vehicle::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::vehicle::FuelAmount*
Arena::CreateMaybeMessage< ::vehicle::FuelAmount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vehicle::FuelAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::vehicle::SpeedAction*
Arena::CreateMaybeMessage< ::vehicle::SpeedAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vehicle::SpeedAction >(arena);
}
template<> PROTOBUF_NOINLINE ::vehicle::NumberDataReply*
Arena::CreateMaybeMessage< ::vehicle::NumberDataReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vehicle::NumberDataReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
