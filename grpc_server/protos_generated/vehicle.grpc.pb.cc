// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vehicle.proto

#include "vehicle.pb.h"
#include "vehicle.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vehicle {

static const char* DataExchanger_method_names[] = {
  "/vehicle.DataExchanger/ManageSpeed",
  "/vehicle.DataExchanger/GetNumberData",
  "/vehicle.DataExchanger/FillFuel",
  "/vehicle.DataExchanger/GetTotalFuel",
};

std::unique_ptr< DataExchanger::Stub> DataExchanger::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataExchanger::Stub> stub(new DataExchanger::Stub(channel, options));
  return stub;
}

DataExchanger::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ManageSpeed_(DataExchanger_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNumberData_(DataExchanger_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FillFuel_(DataExchanger_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTotalFuel_(DataExchanger_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataExchanger::Stub::ManageSpeed(::grpc::ClientContext* context, const ::vehicle::SpeedAction& request, ::vehicle::NumberDataReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vehicle::SpeedAction, ::vehicle::NumberDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ManageSpeed_, context, request, response);
}

void DataExchanger::Stub::async::ManageSpeed(::grpc::ClientContext* context, const ::vehicle::SpeedAction* request, ::vehicle::NumberDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vehicle::SpeedAction, ::vehicle::NumberDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ManageSpeed_, context, request, response, std::move(f));
}

void DataExchanger::Stub::async::ManageSpeed(::grpc::ClientContext* context, const ::vehicle::SpeedAction* request, ::vehicle::NumberDataReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ManageSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>* DataExchanger::Stub::PrepareAsyncManageSpeedRaw(::grpc::ClientContext* context, const ::vehicle::SpeedAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vehicle::NumberDataReply, ::vehicle::SpeedAction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ManageSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>* DataExchanger::Stub::AsyncManageSpeedRaw(::grpc::ClientContext* context, const ::vehicle::SpeedAction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncManageSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataExchanger::Stub::GetNumberData(::grpc::ClientContext* context, const ::vehicle::Ping& request, ::vehicle::NumberDataReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vehicle::Ping, ::vehicle::NumberDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNumberData_, context, request, response);
}

void DataExchanger::Stub::async::GetNumberData(::grpc::ClientContext* context, const ::vehicle::Ping* request, ::vehicle::NumberDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vehicle::Ping, ::vehicle::NumberDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNumberData_, context, request, response, std::move(f));
}

void DataExchanger::Stub::async::GetNumberData(::grpc::ClientContext* context, const ::vehicle::Ping* request, ::vehicle::NumberDataReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNumberData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>* DataExchanger::Stub::PrepareAsyncGetNumberDataRaw(::grpc::ClientContext* context, const ::vehicle::Ping& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vehicle::NumberDataReply, ::vehicle::Ping, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNumberData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>* DataExchanger::Stub::AsyncGetNumberDataRaw(::grpc::ClientContext* context, const ::vehicle::Ping& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNumberDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataExchanger::Stub::FillFuel(::grpc::ClientContext* context, const ::vehicle::FuelAmount& request, ::vehicle::FuelAmount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vehicle::FuelAmount, ::vehicle::FuelAmount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FillFuel_, context, request, response);
}

void DataExchanger::Stub::async::FillFuel(::grpc::ClientContext* context, const ::vehicle::FuelAmount* request, ::vehicle::FuelAmount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vehicle::FuelAmount, ::vehicle::FuelAmount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FillFuel_, context, request, response, std::move(f));
}

void DataExchanger::Stub::async::FillFuel(::grpc::ClientContext* context, const ::vehicle::FuelAmount* request, ::vehicle::FuelAmount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FillFuel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vehicle::FuelAmount>* DataExchanger::Stub::PrepareAsyncFillFuelRaw(::grpc::ClientContext* context, const ::vehicle::FuelAmount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vehicle::FuelAmount, ::vehicle::FuelAmount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FillFuel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vehicle::FuelAmount>* DataExchanger::Stub::AsyncFillFuelRaw(::grpc::ClientContext* context, const ::vehicle::FuelAmount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFillFuelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataExchanger::Stub::GetTotalFuel(::grpc::ClientContext* context, const ::vehicle::Ping& request, ::vehicle::FuelAmount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vehicle::Ping, ::vehicle::FuelAmount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTotalFuel_, context, request, response);
}

void DataExchanger::Stub::async::GetTotalFuel(::grpc::ClientContext* context, const ::vehicle::Ping* request, ::vehicle::FuelAmount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vehicle::Ping, ::vehicle::FuelAmount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTotalFuel_, context, request, response, std::move(f));
}

void DataExchanger::Stub::async::GetTotalFuel(::grpc::ClientContext* context, const ::vehicle::Ping* request, ::vehicle::FuelAmount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTotalFuel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vehicle::FuelAmount>* DataExchanger::Stub::PrepareAsyncGetTotalFuelRaw(::grpc::ClientContext* context, const ::vehicle::Ping& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vehicle::FuelAmount, ::vehicle::Ping, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTotalFuel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vehicle::FuelAmount>* DataExchanger::Stub::AsyncGetTotalFuelRaw(::grpc::ClientContext* context, const ::vehicle::Ping& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTotalFuelRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataExchanger::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataExchanger_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataExchanger::Service, ::vehicle::SpeedAction, ::vehicle::NumberDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataExchanger::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::SpeedAction* req,
             ::vehicle::NumberDataReply* resp) {
               return service->ManageSpeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataExchanger_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataExchanger::Service, ::vehicle::Ping, ::vehicle::NumberDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataExchanger::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::Ping* req,
             ::vehicle::NumberDataReply* resp) {
               return service->GetNumberData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataExchanger_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataExchanger::Service, ::vehicle::FuelAmount, ::vehicle::FuelAmount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataExchanger::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::FuelAmount* req,
             ::vehicle::FuelAmount* resp) {
               return service->FillFuel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataExchanger_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataExchanger::Service, ::vehicle::Ping, ::vehicle::FuelAmount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataExchanger::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::Ping* req,
             ::vehicle::FuelAmount* resp) {
               return service->GetTotalFuel(ctx, req, resp);
             }, this)));
}

DataExchanger::Service::~Service() {
}

::grpc::Status DataExchanger::Service::ManageSpeed(::grpc::ServerContext* context, const ::vehicle::SpeedAction* request, ::vehicle::NumberDataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataExchanger::Service::GetNumberData(::grpc::ServerContext* context, const ::vehicle::Ping* request, ::vehicle::NumberDataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataExchanger::Service::FillFuel(::grpc::ServerContext* context, const ::vehicle::FuelAmount* request, ::vehicle::FuelAmount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataExchanger::Service::GetTotalFuel(::grpc::ServerContext* context, const ::vehicle::Ping* request, ::vehicle::FuelAmount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vehicle

