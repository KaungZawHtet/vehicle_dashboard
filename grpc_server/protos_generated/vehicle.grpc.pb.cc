// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vehicle.proto

#include "vehicle.pb.h"
#include "vehicle.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vehicle {

static const char* DataExchanger_method_names[] = {
  "/vehicle.DataExchanger/GetNumberDataFlow",
  "/vehicle.DataExchanger/GetNumberData",
  "/vehicle.DataExchanger/GetBooleanData",
  "/vehicle.DataExchanger/InformSeatBeltIsUsed",
};

std::unique_ptr< DataExchanger::Stub> DataExchanger::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataExchanger::Stub> stub(new DataExchanger::Stub(channel, options));
  return stub;
}

DataExchanger::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetNumberDataFlow_(DataExchanger_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetNumberData_(DataExchanger_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBooleanData_(DataExchanger_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InformSeatBeltIsUsed_(DataExchanger_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::vehicle::NumberDataReply>* DataExchanger::Stub::GetNumberDataFlowRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vehicle::NumberDataReply>::Create(channel_.get(), rpcmethod_GetNumberDataFlow_, context, request);
}

void DataExchanger::Stub::async::GetNumberDataFlow(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::grpc::ClientReadReactor< ::vehicle::NumberDataReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vehicle::NumberDataReply>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNumberDataFlow_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vehicle::NumberDataReply>* DataExchanger::Stub::AsyncGetNumberDataFlowRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vehicle::NumberDataReply>::Create(channel_.get(), cq, rpcmethod_GetNumberDataFlow_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vehicle::NumberDataReply>* DataExchanger::Stub::PrepareAsyncGetNumberDataFlowRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vehicle::NumberDataReply>::Create(channel_.get(), cq, rpcmethod_GetNumberDataFlow_, context, request, false, nullptr);
}

::grpc::Status DataExchanger::Stub::GetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::vehicle::NumberDataReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNumberData_, context, request, response);
}

void DataExchanger::Stub::async::GetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::NumberDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNumberData_, context, request, response, std::move(f));
}

void DataExchanger::Stub::async::GetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::NumberDataReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNumberData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>* DataExchanger::Stub::PrepareAsyncGetNumberDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vehicle::NumberDataReply, ::vehicle::DisplayDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNumberData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>* DataExchanger::Stub::AsyncGetNumberDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNumberDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataExchanger::Stub::GetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::vehicle::BooleanDataReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vehicle::DisplayDataRequest, ::vehicle::BooleanDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBooleanData_, context, request, response);
}

void DataExchanger::Stub::async::GetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::BooleanDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vehicle::DisplayDataRequest, ::vehicle::BooleanDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBooleanData_, context, request, response, std::move(f));
}

void DataExchanger::Stub::async::GetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::BooleanDataReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBooleanData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vehicle::BooleanDataReply>* DataExchanger::Stub::PrepareAsyncGetBooleanDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vehicle::BooleanDataReply, ::vehicle::DisplayDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBooleanData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vehicle::BooleanDataReply>* DataExchanger::Stub::AsyncGetBooleanDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBooleanDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataExchanger::Stub::InformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::vehicle::SeatBeltUsage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vehicle::SeatBeltUsage, ::vehicle::SeatBeltUsage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InformSeatBeltIsUsed_, context, request, response);
}

void DataExchanger::Stub::async::InformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage* request, ::vehicle::SeatBeltUsage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vehicle::SeatBeltUsage, ::vehicle::SeatBeltUsage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InformSeatBeltIsUsed_, context, request, response, std::move(f));
}

void DataExchanger::Stub::async::InformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage* request, ::vehicle::SeatBeltUsage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InformSeatBeltIsUsed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vehicle::SeatBeltUsage>* DataExchanger::Stub::PrepareAsyncInformSeatBeltIsUsedRaw(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vehicle::SeatBeltUsage, ::vehicle::SeatBeltUsage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InformSeatBeltIsUsed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vehicle::SeatBeltUsage>* DataExchanger::Stub::AsyncInformSeatBeltIsUsedRaw(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInformSeatBeltIsUsedRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataExchanger::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataExchanger_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DataExchanger::Service, ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply>(
          [](DataExchanger::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::DisplayDataRequest* req,
             ::grpc::ServerWriter<::vehicle::NumberDataReply>* writer) {
               return service->GetNumberDataFlow(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataExchanger_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataExchanger::Service, ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataExchanger::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::DisplayDataRequest* req,
             ::vehicle::NumberDataReply* resp) {
               return service->GetNumberData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataExchanger_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataExchanger::Service, ::vehicle::DisplayDataRequest, ::vehicle::BooleanDataReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataExchanger::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::DisplayDataRequest* req,
             ::vehicle::BooleanDataReply* resp) {
               return service->GetBooleanData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataExchanger_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataExchanger::Service, ::vehicle::SeatBeltUsage, ::vehicle::SeatBeltUsage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataExchanger::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::SeatBeltUsage* req,
             ::vehicle::SeatBeltUsage* resp) {
               return service->InformSeatBeltIsUsed(ctx, req, resp);
             }, this)));
}

DataExchanger::Service::~Service() {
}

::grpc::Status DataExchanger::Service::GetNumberDataFlow(::grpc::ServerContext* context, const ::vehicle::DisplayDataRequest* request, ::grpc::ServerWriter< ::vehicle::NumberDataReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataExchanger::Service::GetNumberData(::grpc::ServerContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::NumberDataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataExchanger::Service::GetBooleanData(::grpc::ServerContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::BooleanDataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataExchanger::Service::InformSeatBeltIsUsed(::grpc::ServerContext* context, const ::vehicle::SeatBeltUsage* request, ::vehicle::SeatBeltUsage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vehicle

