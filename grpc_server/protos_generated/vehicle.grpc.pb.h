// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vehicle.proto
#ifndef GRPC_vehicle_2eproto__INCLUDED
#define GRPC_vehicle_2eproto__INCLUDED

#include "vehicle.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace vehicle {

class DataExchanger final {
 public:
  static constexpr char const* service_full_name() {
    return "vehicle.DataExchanger";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::vehicle::NumberDataReply>> GetNumberDataFlow(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::vehicle::NumberDataReply>>(GetNumberDataFlowRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vehicle::NumberDataReply>> AsyncGetNumberDataFlow(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vehicle::NumberDataReply>>(AsyncGetNumberDataFlowRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vehicle::NumberDataReply>> PrepareAsyncGetNumberDataFlow(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vehicle::NumberDataReply>>(PrepareAsyncGetNumberDataFlowRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::vehicle::NumberDataReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::NumberDataReply>> AsyncGetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::NumberDataReply>>(AsyncGetNumberDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::NumberDataReply>> PrepareAsyncGetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::NumberDataReply>>(PrepareAsyncGetNumberDataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::vehicle::BooleanDataReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::BooleanDataReply>> AsyncGetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::BooleanDataReply>>(AsyncGetBooleanDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::BooleanDataReply>> PrepareAsyncGetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::BooleanDataReply>>(PrepareAsyncGetBooleanDataRaw(context, request, cq));
    }
    virtual ::grpc::Status InformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::vehicle::SeatBeltUsage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::SeatBeltUsage>> AsyncInformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::SeatBeltUsage>>(AsyncInformSeatBeltIsUsedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::SeatBeltUsage>> PrepareAsyncInformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::SeatBeltUsage>>(PrepareAsyncInformSeatBeltIsUsedRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetNumberDataFlow(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::grpc::ClientReadReactor< ::vehicle::NumberDataReply>* reactor) = 0;
      virtual void GetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::NumberDataReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::NumberDataReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::BooleanDataReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::BooleanDataReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage* request, ::vehicle::SeatBeltUsage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage* request, ::vehicle::SeatBeltUsage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::vehicle::NumberDataReply>* GetNumberDataFlowRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vehicle::NumberDataReply>* AsyncGetNumberDataFlowRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vehicle::NumberDataReply>* PrepareAsyncGetNumberDataFlowRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::NumberDataReply>* AsyncGetNumberDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::NumberDataReply>* PrepareAsyncGetNumberDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::BooleanDataReply>* AsyncGetBooleanDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::BooleanDataReply>* PrepareAsyncGetBooleanDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::SeatBeltUsage>* AsyncInformSeatBeltIsUsedRaw(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::SeatBeltUsage>* PrepareAsyncInformSeatBeltIsUsedRaw(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::vehicle::NumberDataReply>> GetNumberDataFlow(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::vehicle::NumberDataReply>>(GetNumberDataFlowRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vehicle::NumberDataReply>> AsyncGetNumberDataFlow(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vehicle::NumberDataReply>>(AsyncGetNumberDataFlowRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vehicle::NumberDataReply>> PrepareAsyncGetNumberDataFlow(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vehicle::NumberDataReply>>(PrepareAsyncGetNumberDataFlowRaw(context, request, cq));
    }
    ::grpc::Status GetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::vehicle::NumberDataReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>> AsyncGetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>>(AsyncGetNumberDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>> PrepareAsyncGetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>>(PrepareAsyncGetNumberDataRaw(context, request, cq));
    }
    ::grpc::Status GetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::vehicle::BooleanDataReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::BooleanDataReply>> AsyncGetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::BooleanDataReply>>(AsyncGetBooleanDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::BooleanDataReply>> PrepareAsyncGetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::BooleanDataReply>>(PrepareAsyncGetBooleanDataRaw(context, request, cq));
    }
    ::grpc::Status InformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::vehicle::SeatBeltUsage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::SeatBeltUsage>> AsyncInformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::SeatBeltUsage>>(AsyncInformSeatBeltIsUsedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::SeatBeltUsage>> PrepareAsyncInformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::SeatBeltUsage>>(PrepareAsyncInformSeatBeltIsUsedRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetNumberDataFlow(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::grpc::ClientReadReactor< ::vehicle::NumberDataReply>* reactor) override;
      void GetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::NumberDataReply* response, std::function<void(::grpc::Status)>) override;
      void GetNumberData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::NumberDataReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::BooleanDataReply* response, std::function<void(::grpc::Status)>) override;
      void GetBooleanData(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::BooleanDataReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage* request, ::vehicle::SeatBeltUsage* response, std::function<void(::grpc::Status)>) override;
      void InformSeatBeltIsUsed(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage* request, ::vehicle::SeatBeltUsage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::vehicle::NumberDataReply>* GetNumberDataFlowRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request) override;
    ::grpc::ClientAsyncReader< ::vehicle::NumberDataReply>* AsyncGetNumberDataFlowRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::vehicle::NumberDataReply>* PrepareAsyncGetNumberDataFlowRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>* AsyncGetNumberDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vehicle::NumberDataReply>* PrepareAsyncGetNumberDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vehicle::BooleanDataReply>* AsyncGetBooleanDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vehicle::BooleanDataReply>* PrepareAsyncGetBooleanDataRaw(::grpc::ClientContext* context, const ::vehicle::DisplayDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vehicle::SeatBeltUsage>* AsyncInformSeatBeltIsUsedRaw(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vehicle::SeatBeltUsage>* PrepareAsyncInformSeatBeltIsUsedRaw(::grpc::ClientContext* context, const ::vehicle::SeatBeltUsage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetNumberDataFlow_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNumberData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBooleanData_;
    const ::grpc::internal::RpcMethod rpcmethod_InformSeatBeltIsUsed_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetNumberDataFlow(::grpc::ServerContext* context, const ::vehicle::DisplayDataRequest* request, ::grpc::ServerWriter< ::vehicle::NumberDataReply>* writer);
    virtual ::grpc::Status GetNumberData(::grpc::ServerContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::NumberDataReply* response);
    virtual ::grpc::Status GetBooleanData(::grpc::ServerContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::BooleanDataReply* response);
    virtual ::grpc::Status InformSeatBeltIsUsed(::grpc::ServerContext* context, const ::vehicle::SeatBeltUsage* request, ::vehicle::SeatBeltUsage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNumberDataFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNumberDataFlow() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetNumberDataFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberDataFlow(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::NumberDataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumberDataFlow(::grpc::ServerContext* context, ::vehicle::DisplayDataRequest* request, ::grpc::ServerAsyncWriter< ::vehicle::NumberDataReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNumberData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNumberData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetNumberData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::NumberDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumberData(::grpc::ServerContext* context, ::vehicle::DisplayDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::vehicle::NumberDataReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBooleanData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBooleanData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBooleanData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooleanData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::BooleanDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBooleanData(::grpc::ServerContext* context, ::vehicle::DisplayDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::vehicle::BooleanDataReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InformSeatBeltIsUsed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InformSeatBeltIsUsed() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_InformSeatBeltIsUsed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformSeatBeltIsUsed(::grpc::ServerContext* /*context*/, const ::vehicle::SeatBeltUsage* /*request*/, ::vehicle::SeatBeltUsage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInformSeatBeltIsUsed(::grpc::ServerContext* context, ::vehicle::SeatBeltUsage* request, ::grpc::ServerAsyncResponseWriter< ::vehicle::SeatBeltUsage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetNumberDataFlow<WithAsyncMethod_GetNumberData<WithAsyncMethod_GetBooleanData<WithAsyncMethod_InformSeatBeltIsUsed<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetNumberDataFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNumberDataFlow() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vehicle::DisplayDataRequest* request) { return this->GetNumberDataFlow(context, request); }));
    }
    ~WithCallbackMethod_GetNumberDataFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberDataFlow(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::NumberDataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::vehicle::NumberDataReply>* GetNumberDataFlow(
      ::grpc::CallbackServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNumberData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNumberData() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::NumberDataReply* response) { return this->GetNumberData(context, request, response); }));}
    void SetMessageAllocatorFor_GetNumberData(
        ::grpc::MessageAllocator< ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNumberData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::NumberDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNumberData(
      ::grpc::CallbackServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::NumberDataReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBooleanData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBooleanData() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::vehicle::DisplayDataRequest, ::vehicle::BooleanDataReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vehicle::DisplayDataRequest* request, ::vehicle::BooleanDataReply* response) { return this->GetBooleanData(context, request, response); }));}
    void SetMessageAllocatorFor_GetBooleanData(
        ::grpc::MessageAllocator< ::vehicle::DisplayDataRequest, ::vehicle::BooleanDataReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vehicle::DisplayDataRequest, ::vehicle::BooleanDataReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBooleanData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooleanData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::BooleanDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBooleanData(
      ::grpc::CallbackServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::BooleanDataReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InformSeatBeltIsUsed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InformSeatBeltIsUsed() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::vehicle::SeatBeltUsage, ::vehicle::SeatBeltUsage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vehicle::SeatBeltUsage* request, ::vehicle::SeatBeltUsage* response) { return this->InformSeatBeltIsUsed(context, request, response); }));}
    void SetMessageAllocatorFor_InformSeatBeltIsUsed(
        ::grpc::MessageAllocator< ::vehicle::SeatBeltUsage, ::vehicle::SeatBeltUsage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vehicle::SeatBeltUsage, ::vehicle::SeatBeltUsage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InformSeatBeltIsUsed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformSeatBeltIsUsed(::grpc::ServerContext* /*context*/, const ::vehicle::SeatBeltUsage* /*request*/, ::vehicle::SeatBeltUsage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InformSeatBeltIsUsed(
      ::grpc::CallbackServerContext* /*context*/, const ::vehicle::SeatBeltUsage* /*request*/, ::vehicle::SeatBeltUsage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetNumberDataFlow<WithCallbackMethod_GetNumberData<WithCallbackMethod_GetBooleanData<WithCallbackMethod_InformSeatBeltIsUsed<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetNumberDataFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNumberDataFlow() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetNumberDataFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberDataFlow(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::NumberDataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNumberData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNumberData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetNumberData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::NumberDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBooleanData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBooleanData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBooleanData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooleanData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::BooleanDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InformSeatBeltIsUsed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InformSeatBeltIsUsed() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_InformSeatBeltIsUsed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformSeatBeltIsUsed(::grpc::ServerContext* /*context*/, const ::vehicle::SeatBeltUsage* /*request*/, ::vehicle::SeatBeltUsage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNumberDataFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNumberDataFlow() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetNumberDataFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberDataFlow(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::NumberDataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumberDataFlow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNumberData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNumberData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetNumberData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::NumberDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumberData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBooleanData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBooleanData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetBooleanData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooleanData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::BooleanDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBooleanData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InformSeatBeltIsUsed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InformSeatBeltIsUsed() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_InformSeatBeltIsUsed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformSeatBeltIsUsed(::grpc::ServerContext* /*context*/, const ::vehicle::SeatBeltUsage* /*request*/, ::vehicle::SeatBeltUsage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInformSeatBeltIsUsed(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNumberDataFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNumberDataFlow() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetNumberDataFlow(context, request); }));
    }
    ~WithRawCallbackMethod_GetNumberDataFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberDataFlow(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::NumberDataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetNumberDataFlow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNumberData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNumberData() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNumberData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNumberData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::NumberDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNumberData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBooleanData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBooleanData() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBooleanData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBooleanData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooleanData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::BooleanDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBooleanData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InformSeatBeltIsUsed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InformSeatBeltIsUsed() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InformSeatBeltIsUsed(context, request, response); }));
    }
    ~WithRawCallbackMethod_InformSeatBeltIsUsed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InformSeatBeltIsUsed(::grpc::ServerContext* /*context*/, const ::vehicle::SeatBeltUsage* /*request*/, ::vehicle::SeatBeltUsage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InformSeatBeltIsUsed(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNumberData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNumberData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply>* streamer) {
                       return this->StreamedGetNumberData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNumberData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNumberData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::NumberDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNumberData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vehicle::DisplayDataRequest,::vehicle::NumberDataReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBooleanData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBooleanData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vehicle::DisplayDataRequest, ::vehicle::BooleanDataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vehicle::DisplayDataRequest, ::vehicle::BooleanDataReply>* streamer) {
                       return this->StreamedGetBooleanData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBooleanData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBooleanData(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::vehicle::BooleanDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBooleanData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vehicle::DisplayDataRequest,::vehicle::BooleanDataReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InformSeatBeltIsUsed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InformSeatBeltIsUsed() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vehicle::SeatBeltUsage, ::vehicle::SeatBeltUsage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vehicle::SeatBeltUsage, ::vehicle::SeatBeltUsage>* streamer) {
                       return this->StreamedInformSeatBeltIsUsed(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InformSeatBeltIsUsed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InformSeatBeltIsUsed(::grpc::ServerContext* /*context*/, const ::vehicle::SeatBeltUsage* /*request*/, ::vehicle::SeatBeltUsage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInformSeatBeltIsUsed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vehicle::SeatBeltUsage,::vehicle::SeatBeltUsage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetNumberData<WithStreamedUnaryMethod_GetBooleanData<WithStreamedUnaryMethod_InformSeatBeltIsUsed<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetNumberDataFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetNumberDataFlow() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::vehicle::DisplayDataRequest, ::vehicle::NumberDataReply>* streamer) {
                       return this->StreamedGetNumberDataFlow(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetNumberDataFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNumberDataFlow(::grpc::ServerContext* /*context*/, const ::vehicle::DisplayDataRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::NumberDataReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetNumberDataFlow(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::vehicle::DisplayDataRequest,::vehicle::NumberDataReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetNumberDataFlow<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetNumberDataFlow<WithStreamedUnaryMethod_GetNumberData<WithStreamedUnaryMethod_GetBooleanData<WithStreamedUnaryMethod_InformSeatBeltIsUsed<Service > > > > StreamedService;
};

}  // namespace vehicle


#endif  // GRPC_vehicle_2eproto__INCLUDED
